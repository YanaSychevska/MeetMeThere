//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `BrandonGrotesque-Black.ttf`.
    static let brandonGrotesqueBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrandonGrotesque-Black", pathExtension: "ttf")
    /// Resource file `BrandonGrotesque-Bold.ttf`.
    static let brandonGrotesqueBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrandonGrotesque-Bold", pathExtension: "ttf")
    /// Resource file `BrandonGrotesque-Light.ttf`.
    static let brandonGrotesqueLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrandonGrotesque-Light", pathExtension: "ttf")
    /// Resource file `BrandonGrotesque-Medium.ttf`.
    static let brandonGrotesqueMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrandonGrotesque-Medium", pathExtension: "ttf")
    /// Resource file `BrandonGrotesque-Thin.ttf`.
    static let brandonGrotesqueThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrandonGrotesque-Thin", pathExtension: "ttf")
    /// Resource file `BrandonGrotesque-ThinItalic.ttf`.
    static let brandonGrotesqueThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BrandonGrotesque-ThinItalic", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Preview Content`.
    static let previewContent = Rswift.FileResource(bundle: R.hostingBundle, name: "Preview Content", pathExtension: "")

    /// `bundle.url(forResource: "BrandonGrotesque-Black", withExtension: "ttf")`
    static func brandonGrotesqueBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brandonGrotesqueBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrandonGrotesque-Bold", withExtension: "ttf")`
    static func brandonGrotesqueBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brandonGrotesqueBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrandonGrotesque-Light", withExtension: "ttf")`
    static func brandonGrotesqueLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brandonGrotesqueLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrandonGrotesque-Medium", withExtension: "ttf")`
    static func brandonGrotesqueMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brandonGrotesqueMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrandonGrotesque-Thin", withExtension: "ttf")`
    static func brandonGrotesqueThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brandonGrotesqueThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BrandonGrotesque-ThinItalic", withExtension: "ttf")`
    static func brandonGrotesqueThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brandonGrotesqueThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Preview Content", withExtension: "")`
    static func previewContent(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.previewContent
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `BrandonGrotesque-Black`.
    static let brandonGrotesqueBlack = Rswift.FontResource(fontName: "BrandonGrotesque-Black")
    /// Font `BrandonGrotesque-Bold`.
    static let brandonGrotesqueBold = Rswift.FontResource(fontName: "BrandonGrotesque-Bold")
    /// Font `BrandonGrotesque-Light`.
    static let brandonGrotesqueLight = Rswift.FontResource(fontName: "BrandonGrotesque-Light")
    /// Font `BrandonGrotesque-Medium`.
    static let brandonGrotesqueMedium = Rswift.FontResource(fontName: "BrandonGrotesque-Medium")
    /// Font `BrandonGrotesque-ThinItalic`.
    static let brandonGrotesqueThinItalic = Rswift.FontResource(fontName: "BrandonGrotesque-ThinItalic")
    /// Font `BrandonGrotesque-Thin`.
    static let brandonGrotesqueThin = Rswift.FontResource(fontName: "BrandonGrotesque-Thin")

    /// `UIFont(name: "BrandonGrotesque-Black", size: ...)`
    static func brandonGrotesqueBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brandonGrotesqueBlack, size: size)
    }

    /// `UIFont(name: "BrandonGrotesque-Bold", size: ...)`
    static func brandonGrotesqueBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brandonGrotesqueBold, size: size)
    }

    /// `UIFont(name: "BrandonGrotesque-Light", size: ...)`
    static func brandonGrotesqueLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brandonGrotesqueLight, size: size)
    }

    /// `UIFont(name: "BrandonGrotesque-Medium", size: ...)`
    static func brandonGrotesqueMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brandonGrotesqueMedium, size: size)
    }

    /// `UIFont(name: "BrandonGrotesque-Thin", size: ...)`
    static func brandonGrotesqueThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brandonGrotesqueThin, size: size)
    }

    /// `UIFont(name: "BrandonGrotesque-ThinItalic", size: ...)`
    static func brandonGrotesqueThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: brandonGrotesqueThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.brandonGrotesqueBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrandonGrotesque-Black' could not be loaded, is 'BrandonGrotesque-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brandonGrotesqueBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrandonGrotesque-Bold' could not be loaded, is 'BrandonGrotesque-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brandonGrotesqueLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrandonGrotesque-Light' could not be loaded, is 'BrandonGrotesque-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brandonGrotesqueMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrandonGrotesque-Medium' could not be loaded, is 'BrandonGrotesque-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brandonGrotesqueThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrandonGrotesque-Thin' could not be loaded, is 'BrandonGrotesque-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.brandonGrotesqueThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BrandonGrotesque-ThinItalic' could not be loaded, is 'BrandonGrotesque-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// en translation: LOG IN
      ///
      /// Locales: en, uk, ru
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "uk", "ru"], comment: nil)
      /// en translation: SIGN UP
      ///
      /// Locales: en, uk, ru
      static let signup = Rswift.StringResource(key: "signup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "uk", "ru"], comment: nil)
      /// en translation: SIGN UP LATER
      ///
      /// Locales: en, uk, ru
      static let signupLater = Rswift.StringResource(key: "signupLater", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "uk", "ru"], comment: nil)
      /// en translation: SKIP & START
      ///
      /// Locales: en, uk, ru
      static let launchApp = Rswift.StringResource(key: "launchApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "uk", "ru"], comment: nil)

      /// en translation: LOG IN
      ///
      /// Locales: en, uk, ru
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP
      ///
      /// Locales: en, uk, ru
      static func signup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signup"
        }

        return NSLocalizedString("signup", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP LATER
      ///
      /// Locales: en, uk, ru
      static func signupLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signupLater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signupLater"
        }

        return NSLocalizedString("signupLater", bundle: bundle, comment: "")
      }

      /// en translation: SKIP & START
      ///
      /// Locales: en, uk, ru
      static func launchApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("launchApp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "launchApp"
        }

        return NSLocalizedString("launchApp", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
